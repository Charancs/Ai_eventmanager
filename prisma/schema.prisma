// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole
  department  String?
  year        String?
  rollNo      String?  @unique
  employeeId  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Chatbot specific fields
  conversations Conversation[]
  reminders     Reminder[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String       @db.Text
  role           MessageRole
  messageType    MessageType  @default(TEXT)
  fileUrl        String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Reminder {
  id          String       @id @default(cuid())
  userId      String
  title       String
  description String?      @db.Text
  dueDate     DateTime
  reminderType ReminderType
  isCompleted Boolean      @default(false)
  notified    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Announcement {
  id          String           @id @default(cuid())
  title       String
  content     String           @db.Text
  type        AnnouncementType
  department  String?
  priority    Priority         @default(MEDIUM)
  createdBy   String
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("announcements")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  DEPARTMENT_ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  VOICE
  FILE
}

enum ReminderType {
  EXAM
  PROJECT
  ASSIGNMENT
  EVENT
  PERSONAL
}

enum AnnouncementType {
  COLLEGE
  DEPARTMENT
  CLASS
  URGENT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
